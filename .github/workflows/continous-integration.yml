name: Run molecule scenarios
on: [push, pull_request]
jobs:
  run-molecule:
    name: Test molecule scenarios
    strategy:
      fail-fast: false
      matrix:
        scenario: [backwards_compatibility, default, other_features, tls]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - name: Install Pipenv
        run: python -m pip install pipenv

      - name: Cache Pipenv packages
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ hashFiles('**/Pipfile.lock') }}
      
#      - name: Cache molecule ephemeral directory
#        uses: actions/cache@v2
#        with:
#          path: ~/.cache/molecule/389ds-server/${{ matrix.scenario }}
#          key: ${{ hashFiles('molecule/**') }}-${{ matrix.scenario }}
#      
#      - name: Delete state of previous run
#        run: if [ -d ~/.cache/molecule/389ds-server/${{ matrix.scenario }} ]; then cd ~/.cache/molecule/389ds-server/${{ matrix.scenario }}; rm -rf ansible.cfg inventory molecule.yml state.yml; fi
      
      - name: Create docker images cache folder
        run: mkdir ~/docker-cache
      
      - name: Cache docker images
        id: docker-cache
        uses: actions/cache@v2
        with:
          path: ~/docker-cache
          key: docker-cache-8
      
      - name: Import docker images backup
        run: if [ $(find ~/docker-cache/ -name "*.tar" | wc -l) -gt 0 ]; then for f in ~/docker-cache/*.tar; do docker image import $f $(basename $f | sed 's/.tar$//' | awk '{split($0,segments,"#");print "molecule_local/" segments[1] ":" segments[2]}'); done; fi

      - name: Use pre-built docker images (if they exist)
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: "sed -i 's/pre_build_image: false/pre_build_image: true/g' molecule/${{ matrix.scenario }}/molecule.yml"

      - name: Install dependencies
        run: python -m pipenv install
      
      - name: Test
        run: docker image ls

      - name: Test molecule scenario
        run: python -m pipenv run molecule test -s ${{ matrix.scenario }}
      
      - name: Backup docker images
        run: for i in $(docker container ls -a | grep "molecule_local" | awk '{gsub("molecule_local/|#","");print $1"#"$2}'); do docker export $(echo $i | awk '{split($0,s,"#"); print s[1]}') -o ~/docker-cache/$(echo $i | awk '{split($0,s,"#");print s[2]"#"s[3]}').tar; done
      
      - name: Destroy molecule isntances
        run: python -m pipenv run molecule destroy -s ${{ matrix.scenario }}